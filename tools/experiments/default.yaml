# This is an example of an experiment configuration file. It contains all available options.
# See the Experiment class in experiment.py for the type definitions.
# To see what parameter sets this config generates, run the following command:
#   python3 tools/experiment.py -n --dry-run
# Then check the workspace/default.csv file

# Type of database system
dbtype: sunstorm
# Name of the benchbase benchmark to run
benchmark: hot
# The scale factor to use for the benchmark. The meaning of this value is benchmark-specific.
scalefactor: 10
# The duration of each data point in seconds
time: 10
# The maximum transactions that can be sent per second
rate: 10000
# Transaction isolation level
isolation: TRANSACTION_SERIALIZABLE
# The number of data points between reloads of the database
reload_every: 15
# Information about the parameter keys. The order specified here will be the order in which
# the parameters are combined. If "always_used_in_tag" is true, the parameter will always be
# used in the name of the result. Otherwise, it will only be used if it has more than one value.
param_keys:
  - hot.weights
  - terminals
  - name: hot.keyspertxn
    always_used_in_tag: true
  - hot.hot
  # It is OK to specify parameters that do not appear in the benchmark. This is useful when the
  # parameter change (e.g. number of regions) requires redeploying the system
  - pseudo
# Each parameter is a list of values, which will be combined in all possible ways. A value
# can either be a literal value or an object with a "name" and "value" field. The latter way
# of specifying the value should be used if the value is too long because all values will be
# used in the name of the result. All parameters here must appear in "param_keys".
# The following example generates these combinations (each tuple is a (name, value))
#   {
#     terminals: (terminalsNone, None),
#     hot.keyspertxn: (keyspertxn4, 4),
#     hot.hot: (hot0, 0),
#     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
#     pseudo: (pseudo1, 1)
#   }  
#   {
#     terminals: (terminalsNone, None),
#     hot.keyspertxn: (keyspertxn4, 4),
#     hot.hot: (hot0, 0),
#     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
#     pseudo: (pseudo2, 2)
#   }
#   {
#     terminals: (terminalsNone, None),
#     hot.keyspertxn: (keyspertxn4, 4),
#     hot.hot: (hot100, 100),
#     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
#     pseudo: (pseudo1, 1)
#   }
#   {
#     terminals: (terminalsNone, None),
#     hot.keyspertxn: (keyspertxn4, 4),
#     hot.hot: (hot100, 100),
#     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
#     pseudo: (pseudo2, 2)
#   }
param_values:
  terminals: null
  hot.keyspertxn: 4
  hot.hot: [0, 100]
  hot.weights:
    - name: F-mr0
      value: 100000,0,0,0,0,0,0,0,0,0
  pseudo: [1, 2]
# A list of rules to replace the values in a parameter combination. Every combination generated
# from "parameters" will be passed through these rules. The rules are applied in the order they
# are listed here. Each rule has two parts: a "match" and a "set". The "match" part specifies
# a list of conditions and a combination only need to match with at least one condition.
# The "set" part specifies the values that will be set if the combination matches.
replace:
  - match:
      # match with combinations
      #   {
      #     terminals: (terminalsNone, None),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot0, 0),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo1, 1)
      #   }  
      #   {
      #     terminals: (terminalsNone, None),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot0, 0),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo2, 2)
      #   }
      #   {
      #     terminals: (terminalsNone, None),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot100, 100),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo1, 1)
      #   }
      #   {
      #     terminals: (terminalsNone, None),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot100, 100),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo2, 2)
      #   }
      # instead of using the value name, the value can be also be used to match (e.g. hot.weight: '100000,0,0,0,0,0,0,0,0,0')
      - hot.weights:
          name: F-mr0
    set:
      # then set their "terminals" field
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot0, 0),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo1, 1)
      #   }  
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot0, 0),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo2, 2)
      #   }
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot100, 100),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo1, 1)
      #   }
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot100, 100),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo2, 2)
      #   }
      terminals: 1
  - match:
      # match with combinations, the "terminals" field has already been set previously
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot0, 0),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo2, 2)
      #   }
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (keyspertxn4, 4),
      #     hot.hot: (hot100, 100),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo1, 1)
      #   }
      - hot.hot: 0
        pseudo: 2
      - hot.hot: 100
        pseudo: 1
    set:
      # then set the hot.keyspertxn field. Note that the value name can also be set here
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (8keys, 8),
      #     hot.hot: (hot0, 0),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo2, 2)
      #   }
      #   {
      #     terminals: (terminals1, 1),
      #     hot.keyspertxn: (8keys, 8),
      #     hot.hot: (hot100, 100),
      #     hot.weights: (F-mr0, 100000,0,0,0,0,0,0,0,0,0),
      #     pseudo: (pseudo1, 1)
      #   }
      hot.keyspertxn:
        name: 8keys
        value: 8
