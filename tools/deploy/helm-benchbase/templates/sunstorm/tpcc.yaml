{{ if and (eq .Values.benchmark "tpcc") (eq .Values.dbtype "sunstorm") -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: benchbase-config
  labels:
    app: benchbase-config
    benchmark: tpcc
    part-of: benchbase
data:
  config.xml: |
    <?xml version="1.0"?>
    <parameters>

        <!-- Connection details -->
        <type>POSTGRES</type>
        <driver>org.postgresql.Driver</driver>
        <url>jdbc:postgresql://{{ .Values.target_address_and_database }}?sslmode=disable&amp;ApplicationName=ycsb&amp;reWriteBatchedInserts=true</url>
        <username>{{ default "cloud_admin" .Values.username }}</username>
        <password>{{ default "" .Values.password }}</password>
        <isolation>{{ default "TRANSACTION_SERIALIZABLE" .Values.isolation }}</isolation>
        <batchsize>128</batchsize>

        <ddlpath>/config/ddl.sql</ddlpath>

        <!-- Scale factor is the number of warehouses in TPCC -->
        <scalefactor>{{ .Values.scalefactor }}</scalefactor>
        <loaderThreads>100</loaderThreads>

        <!-- Load data in all partitions -->
        <loadall>{{ .Values.loadall }}</loadall>

        <!-- Current region -->
        <region>{{ .Values.namespace_id }}</region>

        <!-- The workload -->
        <terminals>{{ .Values.terminals }}</terminals>
        <works>
            <work>
                <time>{{ .Values.time }}</time>
                <rate>{{ .Values.rate }}</rate>
                <weights>{{ .Values.tpcc.weights }}</weights>
            </work>
        </works>

        <!-- TPCC specific -->
        <transactiontypes>
            <transactiontype>
                <name>NewOrder</name>
                <!--<preExecutionWait>18000</preExecutionWait>-->
                <!--<postExecutionWait>12000</postExecutionWait>-->
            </transactiontype>
            <transactiontype>
                <name>Payment</name>
                <!--<preExecutionWait>3000</preExecutionWait>-->
                <!--<postExecutionWait>12000</postExecutionWait>-->
            </transactiontype>
            <transactiontype>
                <name>OrderStatus</name>
                <!--<preExecutionWait>2000</preExecutionWait>-->
                <!--<postExecutionWait>10000</postExecutionWait>-->
            </transactiontype>
            <transactiontype>
                <name>Delivery</name>
                <!--<preExecutionWait>2000</preExecutionWait>-->
                <!--<postExecutionWait>5000</postExecutionWait>-->
            </transactiontype>
            <transactiontype>
                <name>StockLevel</name>
                <!--<preExecutionWait>2000</preExecutionWait>-->
                <!--<postExecutionWait>5000</postExecutionWait>-->
            </transactiontype>
        </transactiontypes>
    </parameters>

  ddl.sql: |
    {{- $numRegions := sub (len .Values.ordered_namespaces) 1 }}
    {{- $regionsRange := untilStep 1 (int (add1 (int $numRegions))) 1}}

    CREATE EXTENSION IF NOT EXISTS remotexact;

    {{- range $i := $regionsRange }}
    DROP TABLE IF EXISTS history_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS new_order_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS order_line_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS oorder_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS customer_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS district_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS stock_{{ $i }} CASCADE;
    DROP TABLE IF EXISTS warehouse_{{ $i }} CASCADE;
    {{- end }}

    DROP TABLE IF EXISTS item CASCADE;

    CREATE TABLE item (
        i_id    int           NOT NULL,
        i_name  varchar(24)   NOT NULL,
        i_price decimal(5, 2) NOT NULL,
        i_data  varchar(50)   NOT NULL,
        i_im_id int           NOT NULL,
        PRIMARY KEY (i_id)
    );
    
    {{- range $i := $regionsRange }}
    CREATE TABLE warehouse_{{ $i }} (
        w_id       int            NOT NULL,
        w_ytd      decimal(12, 2) NOT NULL,
        w_tax      decimal(4, 4)  NOT NULL,
        w_name     varchar(10)    NOT NULL,
        w_street_1 varchar(20)    NOT NULL,
        w_street_2 varchar(20)    NOT NULL,
        w_city     varchar(20)    NOT NULL,
        w_state    char(2)        NOT NULL,
        w_zip      char(9)        NOT NULL,
        PRIMARY KEY (w_id)
    );

    CREATE TABLE stock_{{ $i }} (
        s_w_id       int           NOT NULL,
        s_i_id       int           NOT NULL,
        s_quantity   int           NOT NULL,
        s_ytd        decimal(8, 2) NOT NULL,
        s_order_cnt  int           NOT NULL,
        s_remote_cnt int           NOT NULL,
        s_data       varchar(50)   NOT NULL,
        s_dist_01    char(24)      NOT NULL,
        s_dist_02    char(24)      NOT NULL,
        s_dist_03    char(24)      NOT NULL,
        s_dist_04    char(24)      NOT NULL,
        s_dist_05    char(24)      NOT NULL,
        s_dist_06    char(24)      NOT NULL,
        s_dist_07    char(24)      NOT NULL,
        s_dist_08    char(24)      NOT NULL,
        s_dist_09    char(24)      NOT NULL,
        s_dist_10    char(24)      NOT NULL,
        {{- if $.Values.tpcc.foreignkeys }}
        FOREIGN KEY (s_w_id) REFERENCES warehouse_{{ $i }} (w_id) ON DELETE CASCADE,
        FOREIGN KEY (s_i_id) REFERENCES item (i_id) ON DELETE CASCADE,
        {{- end }}
        PRIMARY KEY (s_w_id, s_i_id)
    )
    WITH (fillfactor=90);

    CREATE TABLE district_{{ $i }} (
        d_w_id      int            NOT NULL,
        d_id        int            NOT NULL,
        d_ytd       decimal(12, 2) NOT NULL,
        d_tax       decimal(4, 4)  NOT NULL,
        d_next_o_id int            NOT NULL,
        d_name      varchar(10)    NOT NULL,
        d_street_1  varchar(20)    NOT NULL,
        d_street_2  varchar(20)    NOT NULL,
        d_city      varchar(20)    NOT NULL,
        d_state     char(2)        NOT NULL,
        d_zip       char(9)        NOT NULL,
        {{- if $.Values.tpcc.foreignkeys }}
        FOREIGN KEY (d_w_id) REFERENCES warehouse_{{ $i }} (w_id) ON DELETE CASCADE,
        {{- end }}
        PRIMARY KEY (d_w_id, d_id)
    );

    CREATE TABLE customer_{{ $i }} (
        c_w_id         int            NOT NULL,
        c_d_id         int            NOT NULL,
        c_id           int            NOT NULL, 
        c_discount     decimal(4, 4)  NOT NULL,
        c_credit       char(2)        NOT NULL,
        c_last         varchar(16)    NOT NULL,
        c_first        varchar(16)    NOT NULL,
        c_credit_lim   decimal(12, 2) NOT NULL,
        c_balance      decimal(12, 2) NOT NULL,
        c_ytd_payment  float          NOT NULL,
        c_payment_cnt  int            NOT NULL,
        c_delivery_cnt int            NOT NULL,
        c_street_1     varchar(20)    NOT NULL,
        c_street_2     varchar(20)    NOT NULL,
        c_city         varchar(20)    NOT NULL,
        c_state        char(2)        NOT NULL,
        c_zip          char(9)        NOT NULL,
        c_phone        char(16)       NOT NULL,
        c_since        timestamp      NOT NULL DEFAULT CURRENT_TIMESTAMP,
        c_middle       char(2)        NOT NULL,
        c_data         varchar(500)   NOT NULL,
        {{- if $.Values.tpcc.foreignkeys }}
        FOREIGN KEY (c_w_id, c_d_id) REFERENCES district_{{ $i }} (d_w_id, d_id) ON DELETE CASCADE,
        {{- end }}
        PRIMARY KEY (c_w_id, c_d_id, c_id)
    )
    WITH (fillfactor=90);

    CREATE TABLE history_{{ $i }} (
        h_c_id   int           NOT NULL,
        h_c_d_id int           NOT NULL,
        h_c_w_id int           NOT NULL,
        h_d_id   int           NOT NULL,
        h_w_id   int           NOT NULL,
        h_date   timestamp     NOT NULL DEFAULT CURRENT_TIMESTAMP,
        h_amount decimal(6, 2) NOT NULL,
        h_data   varchar(24)   NOT NULL
        {{- if $.Values.tpcc.foreignkeys }}
        ,
        FOREIGN KEY (h_c_w_id, h_c_d_id, h_c_id) REFERENCES customer_{{ $i }} (c_w_id, c_d_id, c_id) ON DELETE CASCADE,
        FOREIGN KEY (h_w_id, h_d_id) REFERENCES district_{{ $i }} (d_w_id, d_id) ON DELETE CASCADE
        {{- end }}
    )
    WITH (fillfactor=90);

    CREATE TABLE oorder_{{ $i }} (
        o_w_id       int       NOT NULL,
        o_d_id       int       NOT NULL,
        o_id         int       NOT NULL,
        o_c_id       int       NOT NULL,
        o_carrier_id int                DEFAULT NULL,
        o_ol_cnt     int       NOT NULL,
        o_all_local  int       NOT NULL,
        o_entry_d    timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
        PRIMARY KEY (o_w_id, o_d_id, o_id),
        {{- if $.Values.tpcc.foreignkeys }}
        FOREIGN KEY (o_w_id, o_d_id, o_c_id) REFERENCES customer_{{ $i }} (c_w_id, c_d_id, c_id) ON DELETE CASCADE,
        {{- end }}
        UNIQUE (o_w_id, o_d_id, o_c_id, o_id)
    );

    CREATE TABLE new_order_{{ $i }} (
        no_w_id int NOT NULL,
        no_d_id int NOT NULL,
        no_o_id int NOT NULL,
        {{- if $.Values.tpcc.foreignkeys }}
        FOREIGN KEY (no_w_id, no_d_id, no_o_id) REFERENCES oorder_{{ $i }} (o_w_id, o_d_id, o_id) ON DELETE CASCADE,
        {{- end }}
        PRIMARY KEY (no_w_id, no_d_id, no_o_id)
    );

    CREATE TABLE order_line_{{ $i }} (
        ol_w_id        int           NOT NULL,
        ol_d_id        int           NOT NULL,
        ol_o_id        int           NOT NULL,
        ol_number      int           NOT NULL,
        ol_i_id        int           NOT NULL,
        ol_delivery_d  timestamp     NULL DEFAULT NULL,
        ol_amount      decimal(6, 2) NOT NULL,
        ol_supply_w_id int           NOT NULL,
        ol_quantity    decimal(6,2)  NOT NULL,
        ol_dist_info   char(24)      NOT NULL,
        {{- if $.Values.tpcc.foreignkeys }}
        FOREIGN KEY (ol_w_id, ol_d_id, ol_o_id) REFERENCES oorder_{{ $i }} (o_w_id, o_d_id, o_id) ON DELETE CASCADE,
        FOREIGN KEY (ol_supply_w_id, ol_i_id) REFERENCES stock_{{ $i }} (s_w_id, s_i_id) ON DELETE CASCADE,
        {{- end }}
        PRIMARY KEY (ol_w_id, ol_d_id, ol_o_id, ol_number)
    );

    CREATE INDEX idx_customer_name_{{ $i }} ON customer_{{ $i }} (c_w_id, c_d_id, c_last, c_first);

    UPDATE pg_class SET relregion = {{ $i }} WHERE relname IN (
        'warehouse_{{ $i }}',
        'warehouse_{{ $i }}_pkey',
        'stock_{{ $i }}',
        'stock_{{ $i }}_pkey',
        'district_{{ $i }}',
        'district_{{ $i }}_pkey',
        'customer_{{ $i }}',
        'customer_{{ $i }}_pkey',
        'history_{{ $i }}',
        'oorder_{{ $i }}',
        'oorder_{{ $i }}_pkey',
        'oorder_{{ $i }}_o_w_id_o_d_id_o_c_id_o_id_key',
        'new_order_{{ $i }}',
        'new_order_{{ $i }}_pkey',
        'order_line_{{ $i }}',
        'order_line_{{ $i }}_pkey',
        'idx_customer_name_{{ $i }}'
    );
    {{- end }}

{{ end }}