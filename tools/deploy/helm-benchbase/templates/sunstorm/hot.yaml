{{ if and (eq .Values.benchmark "hot") (eq .Values.dbtype "sunstorm") -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: benchbase-config
  labels:
    app: benchbase-config
    benchmark: hot
    part-of: benchbase
data:
  config.xml: |
    <?xml version="1.0"?>
    <parameters>

        <!-- Connection details -->
        <type>POSTGRES</type>
        <driver>org.postgresql.Driver</driver>
        <url>jdbc:postgresql://{{ .Values.target_address_and_database }}?sslmode=disable&amp;ApplicationName=ycsb&amp;reWriteBatchedInserts=true</url>
        <username>{{ default "cloud_admin" .Values.username }}</username>
        <password>{{ default "" .Values.password }}</password>
        <isolation>{{ default "TRANSACTION_SERIALIZABLE" .Values.isolation }}</isolation>
        <batchsize>128</batchsize>
        <loaderThreads>16</loaderThreads>

        <ddlpath>/config/ddl.sql</ddlpath>

        <!-- Scalefactor in YCSB is *1000 the number of rows in the USERTABLE-->
        <scalefactor>{{ .Values.scalefactor }}</scalefactor>
        
        <!-- Override the field size for each column in USERTABLE -->
        <fieldSize>10</fieldSize>

        <!-- Load data in all partitions -->
        <loadall>{{ .Values.loadall }}</loadall>

        <!-- Current region -->
        <region>{{ .Values.namespace_id }}</region>

        <!-- Number of hot keys per partition -->
        <hot>{{ .Values.hot.hot }}</hot>

        <!-- Number of keys per transaction -->
        <keyspertxn>{{ .Values.hot.keyspertxn }}</keyspertxn>
        
        <!-- The maximum number of keys to select in scanning queries -->
        <maxscancount>{{ .Values.hot.maxscancount }}</maxscancount>

        <!-- The workload -->
        <terminals>{{ .Values.terminals }}</terminals>
        <works>
            <work>
                {{- if .Values.warmup }}
                <warmup>{{ .Values.warmup }}</warmup>
                {{- end }}
                <time>{{ .Values.time }}</time>
                <rate>{{ .Values.rate }}</rate>
                <weights>{{ .Values.hot.weights }}</weights>
            </work>
        </works>

        <!-- HOT Procedures declaration -->
        <transactiontypes>
            <!-- Workload F: 50% Read, 50% RMW -->
            <transactiontype>
                <name>WorkloadF1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF6</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF7</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF8</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF9</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF10</name>
            </transactiontype>
        </transactiontypes>
    </parameters>

  ddl.sql: |
    {{- $numRegions := sub (len .Values.ordered_namespaces) 1 }}
    {{- $regionsRange := untilStep 1 (int (add1 (int $numRegions))) 1}}

    CREATE EXTENSION IF NOT EXISTS remotexact;

    {{- range $i := $regionsRange }}
    DROP TABLE IF EXISTS usertable_{{ $i }};
    {{- end }}

    {{- range $i := $regionsRange }}
    CREATE TABLE usertable_{{ $i }} (
        ycsb_key int primary key,
        field1   text,
        field2   text,
        field3   text,
        field4   text,
        field5   text,
        field6   text,
        field7   text,
        field8   text,
        field9   text,
        field10  text
    )
    WITH (fillfactor=90);
    {{- end }}

    {{- range $i := $regionsRange }}
    UPDATE pg_class SET relregion = {{ $i }} WHERE relname IN ('usertable_{{ $i }}', 'usertable_{{ $i }}_pkey');
    {{- end }}
{{ end }}