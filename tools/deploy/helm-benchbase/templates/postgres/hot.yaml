{{ if eq .Values.benchmark "hot" -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: benchbase-config
  labels:
    app: benchbase-config
    benchmark: hot
    part-of: benchbase
data:
  config.xml: |
    <?xml version="1.0"?>
    <parameters>

        <!-- Connection details -->
        <type>POSTGRES</type>
        <driver>org.postgresql.Driver</driver>
        <url>jdbc:postgresql://compute:55433/postgres?sslmode=disable&amp;ApplicationName=ycsb&amp;reWriteBatchedInserts=true</url>
        <username>cloud_admin</username>
        <password>{{ default "" .Values.password }}</password>
        <isolation>TRANSACTION_SERIALIZABLE</isolation>
        <batchsize>128</batchsize>

        <ddlpath>/config/ddl.sql</ddlpath>

        <!-- Scalefactor in YCSB is *1000 the number of rows in the USERTABLE-->
        <scalefactor>{{ .Values.scalefactor }}</scalefactor>
        
        <!-- Optional: Override the field size for each column in USERTABLE -->
        <fieldSize>10</fieldSize>

        <!-- Load data in all partitions -->
        <loadall>{{ .Values.loadall }}</loadall>
        <!-- Current region -->
        <region>{{ .Values.namespace_id }}</region>
        <!-- Number of hot keys per partition -->
        <hot>{{ .Values.hot.hot }}</hot>
        <!-- Number of keys per transaction -->
        <keyspertxn>{{ .Values.hot.keyspertxn }}</keyspertxn>

        <!-- The workload -->
        <terminals>{{ .Values.terminals }}</terminals>
        <works>
            <work>
                <time>{{ .Values.time }}</time>
                <rate>{{ .Values.rate }}</rate>
                <weights>{{ .Values.hot.weights }}</weights>
            </work>
        </works>

        <!-- HOT Procedures declaration -->
        <transactiontypes>
            <!-- Workload A: 50% Read, 50% Write -->
            <transactiontype>
                <name>WorkloadA1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadA2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadA3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadA4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadA5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadA6</name>
            </transactiontype>
            <!-- Workload B: 95% Read, 5% Write -->
            <transactiontype>
                <name>WorkloadB1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadB2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadB3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadB4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadB5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadB6</name>
            </transactiontype>
            <!-- Workload C: 100% Read -->
            <transactiontype>
                <name>WorkloadC1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadC2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadC3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadC4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadC5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadC6</name>
            </transactiontype>
            <!-- Workload D: 95% Read (latest), 5% Insert -->
            <transactiontype>
                <name>WorkloadD1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadD2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadD3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadD4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadD5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadD6</name>
            </transactiontype>
            <!-- Workload E: 95% Scan, 5% Insert -->
            <transactiontype>
                <name>WorkloadE1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadE2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadE3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadE4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadE5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadE6</name>
            </transactiontype>
            <!-- Workload F: 50% Read, 50% RMW -->
            <transactiontype>
                <name>WorkloadF1</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF2</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF3</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF4</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF5</name>
            </transactiontype>
            <transactiontype>
                <name>WorkloadF6</name>
            </transactiontype>
        </transactiontypes>
    </parameters>

  ddl.sql: |
    {{- $numRegions := sub (len .Values.ordered_namespaces) 1 }}

    {{- if .Values.remotexact }}
    CREATE EXTENSION IF NOT EXISTS remotexact;
    {{- end }}
    DROP TABLE IF EXISTS usertable;
    CREATE TABLE usertable (
        ycsb_key int,
        field1   text,
        field2   text,
        field3   text,
        field4   text,
        field5   text,
        field6   text,
        field7   text,
        field8   text,
        field9   text,
        field10  text,
        geo_partition int,
        PRIMARY KEY (geo_partition, ycsb_key)
    )
    {{ if gt $numRegions 0 }}
    PARTITION BY LIST (geo_partition)
    {{ end }}
    ;

    {{- range $i := until (int $numRegions) }}
    CREATE TABLE usertable_{{ add1 $i }} PARTITION OF usertable FOR VALUES IN ({{ add1 $i }});
    UPDATE pg_class SET relregion = {{ add1 $i }} WHERE relname = 'usertable_{{ add1 $i }}';
    UPDATE pg_class SET relregion = {{ add1 $i }} WHERE relname = 'usertable_{{ add1 $i }}_pkey';
    {{- end }}
{{ end }}