#!/bin/bash
source common

set -eu

usage() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -p, --pageserver        Restart only pageserver"
  echo "  -s, --safekeeper        Restart only safekeeper"
  echo "  -x, --xactserver        Restart only xactserver"
  echo "  -n, --new               Start with new data"
  echo "      --region-id         The region id"
  echo "      --safekeeper-id     The safekeeper id"
  echo "      --pageserver-mem    The pageserver buffer cache size in 8KB blocks"
  echo "      --signal-file       The file that signifies the data is ready"
  echo "      --stop              Only stop the components"
  echo "      --download-data     Only download data from minio"
  echo "      --vanilla           Run vanilla neon"
  echo "      --hub-addr          The hub address"
  echo "      --pageserver-addr   The pageserver address"
  echo "      --safekeeper-addr   The safekeeper address"
  echo "      --compute-addr      The compute address"
  echo "      --xactserver-addrs  Comma-separated list of xactserver addresses"
  exit 1
}

run_broker=0
run_pageserver=0
run_safekeeper=0
run_xactserver=0
flag_set=0

stop_only=0
new_data=0
download_data_only=0

region_id=0
safekeeper_id=0
pageserver_mem=1310720
signal_file=.done

vanilla=0

hub_addr=localhost
pageserver_addr=localhost
safekeeper_addr=localhost
compute_addr=localhost
xactserver_addrs=localhost

while (( "$#" )); do
  case "$1" in
    -p|--pageserver)
      run_pageserver=1
      flag_set=1
      shift 1
      ;;
    -s|--safekeeper)
      run_safekeeper=1
      flag_set=1
      shift 1
      ;;
    -x|--xactserver)
      run_xactserver=1
      flag_set=1
      shift 1
      ;;
    -n|--new)
      new_data=1
      shift 1
      ;;
    --region-id)
      region_id=$2
      shift 2
      ;;
    --safekeeper-id)
      safekeeper_id=$2
      shift 2
      ;;
    --pageserver-mem)
      pageserver_mem=$2
      shift 2
      ;;
    --signal-file)
      signal_file=$2
      shift 2
      ;;
    --stop)
      stop_only=1
      shift 1
      ;;
    --download-data)
      download_data_only=1
      shift 1
      ;;
    --vanilla)
      vanilla=1
      shift 1
      ;;
    --hub-addr)
      hub_addr=$2
      shift 2
      ;;
    --pageserver-addr)
      pageserver_addr=$2
      shift 2
      ;;
    --safekeeper-addr)
      safekeeper_addr=$2
      shift 2
      ;;
    --compute-addr)
      compute_addr=$2
      shift 2
      ;;
    --xactserver-addrs)
      IFS=',' read -r -a xactserver_addrs <<< "$2"
      shift 2
      ;;
    -h|--help)
      usage
      ;;
    *) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      usage
      ;;
  esac
done

# If no components are specified, start all of them
if [ $flag_set -eq 0 ]; then
  run_broker=1
  run_pageserver=1
  run_safekeeper=1
  run_xactserver=1
fi

# If the data directory doesn't exist, copy the data from minio
if [ $stop_only -eq 0 ] && ([ ! -d $DATA ] || [ $new_data -eq 1 ]); then
  rm -rf $DATA
  mkdir -p $DATA
  until (mc alias set minio http://${hub_addr}:9000 minioadmin minioadmin) do
      echo 'Waiting to start minio...' && sleep 1
  done
  until (mc stat minio/sunstorm/.neon/$signal_file) do
      echo 'Waiting for the base data...' && sleep 1
  done
  mc cp -r minio/sunstorm/.neon $DATA/
fi

if [ $download_data_only -eq 1 ]; then
  exit 0
fi

if [ $run_broker -eq 1 ] && [ "$pageserver_addr" = "$hub_addr" ]; then
  echo "Stopping any previous storage broker instance"
  kill $(cat logs/storage_broker.pid) || true

  if [ $stop_only -eq 0 ]; then
    run storage_broker "$NEON_DIR/target/release/storage_broker --listen-addr=0.0.0.0:50051"
  fi
fi

if [ $run_pageserver -eq 1 ]; then
  echo "Stopping any previous pageserver instance"
  kill $(cat logs/pageserver.pid) || true

  if [ $stop_only -eq 0 ]; then
    if [ $vanilla -eq 0 ]; then
      run pageserver "$NEON_DIR/target/release/pageserver -D $DATA/.neon \
        -c broker_endpoint='http://$hub_addr:50051'                      \
        -c listen_pg_addr='0.0.0.0:6400'                                 \
        -c listen_http_addr='0.0.0.0:9898'                               \
        -c page_cache_size=$pageserver_mem"
    else
      run pageserver "$NEON_DIR/target/release/pageserver -D $DATA/.neon/pageserver_1 \
        -c broker_endpoint='http://$hub_addr:50051'                                   \
        -c listen_pg_addr='0.0.0.0:6400'                                              \
        -c listen_http_addr='0.0.0.0:9898'                                            \
        -c control_plane_api=''                                                       \
        -c remote_storage={local_path='../local_fs_remote_storage/pageserver'}        \
        -c page_cache_size=$pageserver_mem"
    fi
  fi
fi

if [ $run_safekeeper -eq 1 ]; then
  echo "Stopping any previous safekeeper instance"
  safekeeper_name="safekeeper_$safekeeper_id"
  kill $(cat logs/$safekeeper_name.pid) || true

  if [ $stop_only -eq 0 ]; then
    run $safekeeper_name "$NEON_DIR/target/release/safekeeper \
      --id=$safekeeper_id                                     \
      --datadir=$DATA                                         \
      --advertise-pg=${safekeeper_addr}:5454                  \
      --listen-pg=0.0.0.0:5454                                \
      --listen-http=0.0.0.0:7676                              \
      --broker-endpoint=http://${hub_addr}:50051"
  fi
fi

if [ $run_xactserver -eq 1 ]; then
  echo "Stopping any previous xactserver instance"
  kill $(cat logs/xactserver.pid) || true

  if [ $stop_only -eq 0 ]; then
    urls=()
    for i in "${!xactserver_addrs[@]}"; do
      urls[$i]="http://${xactserver_addrs[$i]}:23000"
    done
    node_urls=$(printf ",%s" "${urls[@]}")
    node_urls=${node_urls:1}

    run xactserver "$XACTSERVER_DIR/target/release/xactserver             \
      --listen-pg=0.0.0.0:10000                                           \
      --connect-pg=postgresql://cloud_admin@$compute_addr:55433/postgres  \
      --max-conn-pool-size-pg=100                                         \
      --node-id=$region_id                                                \
      --nodes=$node_urls                                                  \
      --max-conn-pool-size-peer=100                                       \
      --listen-peer=0.0.0.0:23000                                         \
      --listen-http=0.0.0.0:8080                                          \
      --no-ansi"
  fi
fi